import { createSlice } from '@reduxjs/toolkit';





const initialState = {
  Userposts: [],
  publicPosts: []
};





// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.



export const postsSlice = createSlice({
  name: 'posts',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUserPosts: (state, action) => {
        state.Userposts= action.payload.posts;
    },
    setPublicPosts: (state, action) => {
      state.publicPosts= action.payload.posts;
    }
    ,

    deleteUserPosts: (state) => {
      state.Userposts= null;
    },

    deletePublicPosts: (state) => {
      state.publicPosts= null
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
 
});



 


export const { setUserPosts, setPublicPosts, deleteUserPosts, deletePublicPosts} = postsSlice.actions;



// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectUserPosts= (state) => state.posts.Userposts;
export const selectPublicPosts= (state) => state.posts.publicPosts;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default postsSlice.reducer;