import { createSlice } from '@reduxjs/toolkit';


import jwtDecode from 'jwt-decode'



const initialState = {
  user: null,
  otherUsers: null
};



if(localStorage.getItem('jwtToken')){
  const decodedToken= jwtDecode(localStorage.getItem('jwtToken'))
  const userLoggedIn= JSON.parse(localStorage.getItem('user'))

  if(decodedToken.exp * 1000 < Date.now()){
    localStorage.removeItem('jwtToken');
    // localStorage.removeItem('user');
  }else {
    // let loggedIn= localStorage.getItem('user');
    
    initialState.user= userLoggedIn;
  }
  
}


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.



export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setUser: (state, action) => {
        state.user= action.payload.user;
    },

    setUsers: (state, action) => {
      state.otherUsers= action.payload.user;
    },

    deleteUser:(state) => {
        state.user= null
        state.otherUsers= null
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
 
});



 


export const { setUser, deleteUser, setUsers } = userSlice.actions;



// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectUser= (state) => state.user.user;
export const selectUsers= (state) => state.user.otherUsers;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default userSlice.reducer;
